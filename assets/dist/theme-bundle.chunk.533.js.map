{"version":3,"file":"theme-bundle.chunk.533.js","mappings":"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","sources":["webpack://bigcommerce-hera/./assets/js/theme/auth.js","webpack://bigcommerce-hera/./assets/js/theme/common/form-validation.js"],"sourcesContent":["import PageManager from './page-manager';\nimport stateCountry from './common/state-country';\nimport nod from './common/nod';\nimport validation from './common/form-validation';\nimport forms from './common/models/forms';\nimport {\n    classifyForm,\n    Validators,\n    createPasswordValidationErrorTextObject,\n    announceInputErrorMessage,\n} from './common/utils/form-utils';\nimport { createTranslationDictionary } from './common/utils/translations-utils';\n\nexport default class Auth extends PageManager {\n    constructor(context) {\n        super(context);\n        this.validationDictionary = createTranslationDictionary(context);\n        this.formCreateSelector = 'form[data-create-account-form]';\n        this.recaptcha = $('.g-recaptcha iframe[src]');\n    }\n\n    registerLoginValidation($loginForm) {\n        const loginModel = forms;\n\n        this.loginValidator = nod({\n            submit: '.login-form input[type=\"submit\"]',\n            tap: announceInputErrorMessage,\n        });\n\n        this.loginValidator.add([\n            {\n                selector: '.login-form input[name=\"login_email\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n            {\n                selector: '.login-form input[name=\"login_pass\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.password(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterPass,\n            },\n        ]);\n\n        $loginForm.on('submit', event => {\n            this.loginValidator.performCheck();\n\n            if (this.loginValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerForgotPasswordValidation($forgotPasswordForm) {\n        this.forgotPasswordValidator = nod({\n            submit: '.forgot-password-form input[type=\"submit\"]',\n            tap: announceInputErrorMessage,\n        });\n\n        this.forgotPasswordValidator.add([\n            {\n                selector: '.forgot-password-form input[name=\"email\"]',\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n        ]);\n\n        $forgotPasswordForm.on('submit', event => {\n            this.forgotPasswordValidator.performCheck();\n\n            if (this.forgotPasswordValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerNewPasswordValidation() {\n        const { password: enterPassword, password_match: matchPassword, invalid_password: invalidPassword } = this.validationDictionary;\n        const newPasswordForm = '.new-password-form';\n        const newPasswordValidator = nod({\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\n            tap: announceInputErrorMessage,\n        });\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\n        const errorTextMessages = createPasswordValidationErrorTextObject(enterPassword, enterPassword, matchPassword, invalidPassword);\n        Validators.setPasswordValidation(\n            newPasswordValidator,\n            passwordSelector,\n            password2Selector,\n            this.passwordRequirements,\n            errorTextMessages,\n        );\n    }\n\n    registerCreateAccountValidator($createAccountForm) {\n        const validationModel = validation($createAccountForm, this.context);\n        const createAccountValidator = nod({\n            submit: `${this.formCreateSelector} input[type='submit']`,\n            tap: announceInputErrorMessage,\n        });\n        const $stateElement = $('[data-field-type=\"State\"]');\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\n        const $emailElement = $(emailSelector);\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\n        const $passwordElement = $(passwordSelector);\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\n        const $password2Element = $(password2Selector);\n\n        createAccountValidator.add(validationModel);\n\n        if ($stateElement) {\n            let $last;\n\n            // Requests the states for a country with AJAX\n            stateCountry($stateElement, this.context, (err, field) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                const $field = $(field);\n\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\n                    createAccountValidator.remove($stateElement);\n                }\n\n                if ($last) {\n                    createAccountValidator.remove($last);\n                }\n\n                if ($field.is('select')) {\n                    $last = field;\n                    Validators.setStateCountryValidation(createAccountValidator, field, this.validationDictionary.field_not_blank);\n                } else {\n                    Validators.cleanUpStateValidation(field);\n                }\n            });\n        }\n\n        if ($emailElement) {\n            createAccountValidator.remove(emailSelector);\n            Validators.setEmailValidation(createAccountValidator, emailSelector, this.validationDictionary.valid_email);\n        }\n\n        if ($passwordElement && $password2Element) {\n            const { password: enterPassword, password_match: matchPassword, invalid_password: invalidPassword } = this.validationDictionary;\n\n            createAccountValidator.remove(passwordSelector);\n            createAccountValidator.remove(password2Selector);\n            Validators.setPasswordValidation(\n                createAccountValidator,\n                passwordSelector,\n                password2Selector,\n                this.passwordRequirements,\n                createPasswordValidationErrorTextObject(enterPassword, enterPassword, matchPassword, invalidPassword),\n            );\n        }\n\n        $createAccountForm.on('submit', event => {\n            createAccountValidator.performCheck();\n\n            if (createAccountValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    /**\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\n     */\n    onReady() {\n        if (!this.recaptcha.attr('title')) {\n            this.recaptcha.attr('title', this.context.recaptchaTitle);\n        }\n\n        const $createAccountForm = classifyForm(this.formCreateSelector);\n        const $loginForm = classifyForm('.login-form');\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\n\n        // Injected via auth.html\n        this.passwordRequirements = this.context.passwordRequirements;\n\n        if ($loginForm.length) {\n            this.registerLoginValidation($loginForm);\n        }\n\n        if ($newPasswordForm.length) {\n            this.registerNewPasswordValidation();\n        }\n\n        if ($forgotPasswordForm.length) {\n            this.registerForgotPasswordValidation($forgotPasswordForm);\n        }\n\n        if ($createAccountForm.length) {\n            this.registerCreateAccountValidator($createAccountForm);\n        }\n    }\n}\n","import { createTranslationDictionary } from './utils/translations-utils';\n\n/**\n * Validate that the given date for the day/month/year select inputs is within potential range\n * @param $formField\n * @param validation\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\n */\nfunction buildDateValidation($formField, validation) {\n    // No date range restriction, skip\n    if (validation.min_date && validation.max_date) {\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\n        const formElementId = $formField.attr('id');\n        const minSplit = validation.min_date.split('-');\n        const maxSplit = validation.max_date.split('-');\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\n\n        return {\n            selector: `#${formElementId} select[data-label=\"year\"]`,\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\n            validate: (cb, val) => {\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\n                const year = Number(val);\n                const chosenDate = new Date(year, month, day);\n\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\n            },\n            errorMessage: invalidMessage,\n        };\n    }\n}\n\n/**\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\n * from many different inputs\n * @param $formField\n * @param validation\n * @param errorText provides error validation message\n */\nfunction buildRequiredCheckboxValidation(validation, $formField, errorText) {\n    const formFieldId = $formField.attr('id');\n    const primarySelector = `#${formFieldId} input:first-of-type`;\n    const secondarySelector = `#${formFieldId} input`;\n\n    return {\n        selector: primarySelector,\n        triggeredBy: secondarySelector,\n        validate: (cb) => {\n            let result = false;\n\n            $(secondarySelector).each((index, checkbox) => {\n                if (checkbox.checked) {\n                    result = true;\n\n                    return false;\n                }\n            });\n\n            cb(result);\n        },\n        errorMessage: errorText,\n    };\n}\n\nfunction buildRequiredValidation(validation, selector, errorText) {\n    return {\n        selector,\n        validate(cb, val) {\n            cb(val.length > 0);\n        },\n        errorMessage: errorText,\n    };\n}\n\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\n    const min = Number(validation.min);\n    const max = Number(validation.max);\n\n    return {\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\n        validate: (cb, val) => {\n            const numberVal = Number(val);\n\n            cb(numberVal >= min && numberVal <= max);\n        },\n        errorMessage: invalidMessage,\n    };\n}\n\n\nfunction buildValidation($validateableElement, errorMessage) {\n    const validation = $validateableElement.data('validation');\n    const fieldValidations = [];\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\n\n    if (validation.type === 'datechooser') {\n        const dateValidation = buildDateValidation($validateableElement, validation);\n\n        if (dateValidation) {\n            fieldValidations.push(dateValidation);\n        }\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\n        fieldValidations.push(buildRequiredCheckboxValidation(validation, $validateableElement, errorMessage));\n    } else {\n        $validateableElement.find('input, select, textarea').each((index, element) => {\n            const $inputElement = $(element);\n            const tagName = $inputElement.get(0).tagName;\n            const inputName = $inputElement.attr('name');\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\n\n            if (validation.type === 'numberonly') {\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\n            }\n            if (validation.required) {\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector, errorMessage));\n            }\n        });\n    }\n\n    return fieldValidations;\n}\n\n/**\n * Builds the validation model for dynamic forms\n * @param $form\n * @param context provides access for error messages on required fields validation\n * @returns {Array}\n */\nexport default function ($form, context) {\n    let validationsToPerform = [];\n    const { field_not_blank: requiredFieldValidationText } = createTranslationDictionary(context);\n\n    $form.find('[data-validation]').each((index, input) => {\n        const getLabel = $el => $el.first().data('validation').label;\n        const requiredValidationMessage = getLabel($(input)) + requiredFieldValidationText;\n\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input), requiredValidationMessage));\n    });\n\n    return validationsToPerform;\n}\n"],"names":["Auth","_PageManager","context","_this","call","validationDictionary","createTranslationDictionary","formCreateSelector","recaptcha","$","_proto","prototype","registerLoginValidation","$loginForm","_this2","loginModel","forms","this","loginValidator","nod","submit","tap","announceInputErrorMessage","add","selector","validate","cb","val","email","errorMessage","useValidEmail","password","enterPass","on","event","performCheck","areAll","preventDefault","registerForgotPasswordValidation","$forgotPasswordForm","_this3","forgotPasswordValidator","registerNewPasswordValidation","_this$validationDicti","enterPassword","matchPassword","password_match","invalidPassword","invalid_password","newPasswordForm","newPasswordValidator","passwordSelector","password2Selector","errorTextMessages","createPasswordValidationErrorTextObject","Validators","setPasswordValidation","passwordRequirements","registerCreateAccountValidator","$createAccountForm","$last","_this4","validationModel","validation","createAccountValidator","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","stateCountry","err","field","Error","$field","getStatus","remove","is","setStateCountryValidation","field_not_blank","cleanUpStateValidation","setEmailValidation","valid_email","_this$validationDicti2","onReady","attr","recaptchaTitle","classifyForm","$newPasswordForm","length","PageManager","$form","validationsToPerform","requiredFieldValidationText","find","each","index","input","requiredValidationMessage","first","data","label","concat","$validateableElement","errorText","formFieldId","secondarySelector","fieldValidations","formFieldSelector","type","dateValidation","$formField","min_date","max_date","invalidMessage","formElementId","minSplit","split","maxSplit","minDate","Date","maxDate","triggeredBy","day","Number","month","year","chosenDate","buildDateValidation","push","required","element","$inputElement","tagName","get","inputName","elementSelector","min","max","name","numberVal","buildNumberRangeValidation","buildRequiredValidation","result","checkbox","checked","buildValidation"],"sourceRoot":""}